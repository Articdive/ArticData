package com.minestom.code_generator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonReader;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(CodeGenerator.class);
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private static final File INPUT_FOLDER = new File("../../DataGenerator/output/");

    public static void main(String[] args) {
        if (args.length == 0) {
            LOGGER.info("You must specify a version to generate data for.");
            return;
        }
        // version for the output.
        String version = args[0];
        String filePrefix = version.replaceAll("\\.", "_") + "_";
        File outputFolder = new File("../../AutoGenerated/" + version + "/");
        // Create output folder
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            throw new ExceptionInInitializerError("Failed to create output folder.");
        }
        generateBlocks(filePrefix, outputFolder);
    }

    public static void generateBlocks(String filePrefix, File outputDir) {
        JsonArray blocks;

        try {
            blocks = GSON.fromJson(new JsonReader(new FileReader(new File(INPUT_FOLDER, filePrefix + "blocks.json"))), JsonArray.class);
        } catch (FileNotFoundException e) {
            LOGGER.error("Failed to find blocks.json, stopped generating code for blocks", e);
            return;
        }
        ClassName blockClassName = ClassName.get("net.minestom.server.instance.block", "Block");
        ClassName blockStateClassName = ClassName.get("net.minestom.server.instance.block", "BlockState");

        // Block
        TypeSpec.Builder blockClass = TypeSpec.classBuilder(blockClassName).addModifiers(Modifier.PUBLIC);
        blockClass.addField(FieldSpec.builder(String.class, "id").addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build());
        blockClass.addField(FieldSpec.builder(TypeName.SHORT, "defaultBlockState").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockClass.addField(FieldSpec.builder(TypeName.DOUBLE, "explosionResistance").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockClass.addField(FieldSpec.builder(TypeName.DOUBLE, "friction").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockClass.addField(FieldSpec.builder(TypeName.DOUBLE, "speedFactor").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockClass.addField(FieldSpec.builder(TypeName.DOUBLE, "jumpFactor").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockClass.addField(FieldSpec.builder(String.class, "itemId").addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(Nullable.class).build());
        blockClass.addField(
                FieldSpec.builder(ParameterizedTypeName.get(ClassName.get("java.util", "List"), blockStateClassName), "blockStates")
                        .initializer("new $T<>()", ClassName.get("java.util", "ArrayList"))
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(NotNull.class)
                        .build()
        );
        blockClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(String.class, "id")
                        .addParameter(TypeName.SHORT, "defaultBlockState")
                        .addParameter(TypeName.DOUBLE, "explosionResistance")
                        .addParameter(TypeName.DOUBLE, "friction")
                        .addParameter(TypeName.DOUBLE, "speedFactor")
                        .addParameter(TypeName.DOUBLE, "jumpFactor")
                        .addParameter(String.class, "itemId")

                        .addStatement("this.id = id")
                        .addStatement("this.defaultBlockState = defaultBlockState")
                        .addStatement("this.explosionResistance = explosionResistance")
                        .addStatement("this.friction = friction")
                        .addStatement("this.speedFactor = speedFactor")
                        .addStatement("this.jumpFactor = jumpFactor")
                        .addStatement("this.itemId = itemId")
                        .addModifiers(Modifier.PROTECTED)
                        .build()
        );
        blockClass.addMethod(
                MethodSpec.methodBuilder("addBlockState")
                        .addParameter(blockStateClassName, "blockState")

                        .addStatement("this.blockStates.add(blockState)")
                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                        .build()
        );

        // BlockState
        TypeSpec.Builder blockStateClass = TypeSpec.classBuilder(blockStateClassName).addModifiers(Modifier.PUBLIC);
        blockStateClass.addField(FieldSpec.builder(TypeName.SHORT, "id").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockStateClass.addField(FieldSpec.builder(blockClassName, "block").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockStateClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(TypeName.SHORT, "id")
                        .addParameter(blockClassName, "block")

                        .addStatement("this.id = id")
                        .addStatement("this.block = block")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );

        // For static initStates
        List<CodeBlock> staticInits = new ArrayList<>();

        // Use data
        for (JsonElement b : blocks) {
            JsonObject block = b.getAsJsonObject();

            String blockName = block.get("name").getAsString();
            // Handle defaults:
            String itemId = block.get("itemId").getAsString();
            if (itemId.equals("minecraft:air")) {
                itemId = null;
            }

            blockClass.addField(
                    FieldSpec.builder(
                            blockClassName,
                            blockName
                    ).initializer(
                            "new $T($S, (short) $L, $L, $L, $L, $L, $S)",
                            blockClassName,
                            block.get("id").getAsString(),
                            block.get("defaultBlockState").getAsInt(),
                            block.get("explosionResistance").getAsDouble(),
                            block.get("friction").getAsDouble(),
                            block.get("speedFactor").getAsDouble(),
                            block.get("jumpFactor").getAsDouble(),
                            itemId
                    ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build()
            );

            JsonArray states = block.get("states").getAsJsonArray();

            ClassName blockStateSpecificClassName = ClassName.get(
                    "net.minestom.server.instance.block.states",
                    NameUtil.convertSnakeCaseToCamelCase(blockName.toLowerCase())
            );

            // Common blockStateSpecificClass structure
            TypeSpec.Builder blockStateSpecificClass = TypeSpec.classBuilder(blockStateSpecificClassName)
                    .addAnnotation(
                            AnnotationSpec.builder(Deprecated.class)
                                    .addMember("since", "$S", "forever")
                                    .addMember("forRemoval", "$L", false).build()
                    )
                    .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
            // initStates method
            MethodSpec.Builder initStatesMethod = MethodSpec.methodBuilder("initStates")
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC);

            int relativeId = 0;
            for (JsonElement s : states) {
                JsonObject state = s.getAsJsonObject();
                // Field
                FieldSpec stateField = FieldSpec.builder(
                        blockStateClassName,
                        blockName + "_" + relativeId
                ).initializer(
                        "new $T((short) $L, $T.$N)",
                        blockStateClassName,
                        state.get("id").getAsShort(),
                        blockClassName,
                        blockName
                ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build();
                // Add Field to class
                blockStateSpecificClass.addField(stateField);
                // Add field to initStates method
                initStatesMethod.addStatement(
                        "Block.$N.addBlockState($N)", blockName, stateField.name);
                relativeId += 1;
            }
            // Add initStates Method
            blockStateSpecificClass.addMethod(initStatesMethod.build());

            // Add initStates method refence to static block
            staticInits.add(CodeBlock.builder().addStatement("$T.initStates()", blockStateSpecificClassName).build());

            // Write BlockState
            try {
                JavaFile.builder("net.minestom.server.instance.block.states", blockStateSpecificClass.build()).build().writeTo(outputDir);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        // Add static blocks
        for (int i = 0; i <= staticInits.size() / 250; i++) {
            CodeBlock.Builder staticBlock = CodeBlock.builder();
            for (int j = 0; j < 250 && (i * 250 + j) < staticInits.size(); j++) {
                staticBlock.add(staticInits.get(i * 250 + j));
            }
            blockClass.addStaticBlock(staticBlock.build());
        }

        // Write classes
        try {
            JavaFile.builder("net.minestom.server.instance.block", blockClass.build()).build().writeTo(outputDir);
            JavaFile.builder("net.minestom.server.instance.block", blockStateClass.build()).build().writeTo(outputDir);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
